---
title: "Day 2"
format: html
editor: visual
execute: 
  eval: false
toc: true
toc-depth: 4
---

# Data Wrangling

... or put differently, welcome to the real world. Real datasets are seldom as tidy and clean as those you have been working with so far. Real data is messy and often you'll need to clean and coerce it into the right format in order to actually analyze it. This session contains a number of examples that serve as cookbook recipes for common data wrangling tasks.

## Using the R Help

One of the most important features that you will need as you start on your path to becoming and R user is getting help. No matter how skilled of a programmer you are, you always encounter new functions and need help understanding how to use them. We will take some time to explore the help features in R.

To get online help within an R session we use the `help()` function. This will allow us to see the documentation on a function that we are interested in.

Let's say we want to import a csv file and we know we need to use the `read.csv` function:

```{r}
help(read.csv)
```

You can get help with the `?` function:

```{r}
?read.csv
```

Many times we just need to see some examples rather than read the entire documentation of a function or command. In this situation we would use the `example()` function. Consider below where we might be interested in some perspective plots. When you enter this into RStudio you will see some of the beautiful graphics that R can do:

```{r}
example(persp)
```

The Run Examples hyperlink at the bottom of the function documentation is generally the quickest way to understand different use cases.

Aside from these areas of help another method is to search the internet for further help. Here are some other resources:

-   [The Comprehensive R Archive Network](https://cran.r-project.org/)

-   [UCLA Statistical Computing Help Site](http://www.ats.ucla.edu/stat/r/)

-   [Google Search Site](http://statseducation.com/Introduction-to-R/modules/getting%20started/help/www.google.com)

-   [Github](http://statseducation.com/Introduction-to-R/modules/getting%20started/help/www.github.com)

-   [StackExchange](http://stackexchange.com/)

### EXERCISE

Look up the documentation for `lm` . What does this function do? Can you run some examples of this function? What inputs does it take? What outputs does it return?

```{r}

```

## Useful functions

This section will list several basic R functions that are very useful and should be part of your toolbox.

### ifelse

`ifelse()` allows you to change the values of a vector based on a conditional test. It's useful for recoding data, and you can use it in situations where you don't want to change the underlying data.

The format is:

```{r}
ifelse(test_condition, value_if_true, value_if_false)
```

where the test condition is usually some comparison or operation on a vector - anything that results in TRUE or FALSE values

```{r}
x <- c(-1, 2, 3, -5, 3, NA, -4, 6)
x >= 0

ifelse(x >= 0, x, 0)  # keep positive (>= 0) values as they are, replace others with 0

ifelse(is.na(x), 0, x)  # replace missing values with 0, leave others alone

ifelse(x %% 2 == 0, "even", "odd")  ## remainder of dividing x by 2 is 0 
```

`ifelse()` looks at each value in the initial TRUE/FALSE vector, and it decides what the value at each position should then be.

%% is an operator that returns the value left after dividing by an integer -- the remainder

```{r}
4 %% 2
7 %% 2

x %% 2

ifelse(x %% 2 == 0, "even", "odd")  ## remainder of dividing x by 2 is 0 
```

There's also the useful `replace_na()` function in the tidyr package and `na_if()` in dplyr.

```{r}
library(tidyr)
library(dplyr)

replace_na(x, 0) # replace NA with 0

y <- c("abc", "def", "", "ghi") # remove an empty string
na_if(y, "")

na_if(1:5, 5:1) # when x == y, replace the value in x with NA
```

### EXERCISE

Where the value in the vector below is positive, take the square root. Where it is negative, substitute in `NA`.

```{r}
y <- c(4, -1, 3, 6, -7, 10, 20)
```

### EXERCISE

Recode the vector below such that values at or above the average are replaced with "tall" and values below average are replaced with "short"

Remember: break this into parts. Start with computing the mean of x, then use that in an expression to determine which values of x are above that mean

```{r}
y <- c(4, 6, 5, 7, 3, 6, 4, 5, 3, 6, 6, 5, 6, 7, 6, 4, 6, 5, 7, 5)
```

### %in%

`%in%` returns TRUE if the value on the left is in the vector on the right, FALSE otherwise. Unlike `==`, if the value on the left is `NA`, it will return FALSE unless `NA` is also in the vector on the right:

```{r}
x <- c(-1, 2, 3, -5, 3, NA, -4, 6)
x %in% c(1, 2, 3)
x == 1 | x == 2 | x == 3
```

```{r}
state.name  # built-in vector in R

ifelse(state.name %in% c("Alaska", "Hawaii"), NA, state.name)
```

Let's use it with some data:

```{r}
evp <- read.csv("data/ev_police_jan.csv")
```

We could use it to subset data - get the rows where the location is an Evanston zip code

```{r}
evp[evp$location %in% c(60201, 60202), ]
```

Or make a new column called `evanston` if the location is one of the two main Evanston zip codes of 60201 or 60202

```{r}
evp$evanston <- evp$location %in% c(60201, 60202)
table(evp$evanston)
```

### EXERCISE

Select the rows from the `evp` data below where the vehicle make is one of FIAT, DATS, GEO, JAGU, or PEUG

```{r}
evp <- read.csv("data/ev_police_jan.csv")
View(evp)

```

### paste

The `paste()` function is used to join pieces of text:

```{r}
paste("John", "Oliver")
```

The default separator between the strings is a space, but you can change it:

```{r}
paste("John", "Oliver", sep="---")
```

But, I frequently want to join strings with no space between them:

```{r}
paste("John", "Oliver", sep="")
```

There's a shortcut for this:

```{r}
paste0("John", "Oliver")
```

You can also paste the elements of two or more vectors together:

```{r}
first_names <- c("John", "Kate", "Tyler", "Jordan")
last_names <- c("Lee", "Sharma", "Smith", "Rodriguez")

paste(first_names, last_names, sep=" ")
```

If you provide a vector of characters, you can also use the `collapse` argument, which places whatever you provide for `collapse` between the characters of the vector:

```{r}
state.name[1:5] # built-n vector state.name, using the first 5 values

paste0(state.name[1:5], collapse = ", and ")
paste0(state.name[1:5], sep = ", and ") # will not work as intended
```

### EXERCISE

`state.abb` has two-letter abbreviations for US states. `state.region` has the region for each US state. Use `paste()` to join the info from these two vectors together, so the output has entries that look like:

```         
"AL: South"         "AK: West"          "AZ: West"          "AR: South"  ...
```

```{r}

```

### seq and seq_along

`seq()` is used to generate sequences of numbers. You can specify the interval between values or how many values you want.

```{r}
seq(from=1, to=10, by=2)
```

Note that the sequence output will only have values that are \<= the "to" value.

```{r}
seq(0, 10, length.out=4)
```

```{r}
seq(0, 1, .1)
```

`seq_along()` behaves similarly, but returns a sequence starting from 1 to the length of the object passed to it.

```{r}
seq_along(c(-1, 3, 56, -90))
```

### EXERCISE

Use the `seq()` function to select every 5th row from `state.x77` (it's a matrix built in to R - you can index it like a data frame).

Things you need to figure out: how do you know what the sequence should go to? How do you use the result of seq() to then select the rows?

```{r}

```

### rep

`rep()` replicates the values in `x`.

```{r}
rep(1:4, times = 2)
```

```{r}
rep(1:4, each = 3)  
```

```{r}
rep(1:4, len = 5) 
```

### EXERCISE

Create a vector whose length matches the length of `x` and fill it with alternating 1's and 0's

```{r}
x <- c(6, 6, 4, 3, 9, 4, 7, 5, 1, 6)

```

### rbind and cbind

`rbind()` stands for *row bind* and `cbind()` stands for *column bind*. These functions are useful to add rows or columns to existing data frames, or to bind two data frames together in a row-wise or column-wise fashion.

Say we have two dataframes:

```{r}
#creating the first data frame 
df1 <- data.frame(Student_class=c("High school","College","College","High school","College", "College"),
                Student_name = c("Mark","John","Jessica","Floyd","Susan", "Shannon"))

# creating the second dataframe
df2 <- data.frame(Student_class = c("High school","College"),
                  Student_name = c("Bracy","Evin"))

df2
```

Now we have 2 data frames of different row counts (df1 and df2). Let's use the `rbind()` function to bind the above 2 data frames into a single data frame.

```{r}
rbind(df1,df2) #binds rows of 2 input data frames
```

When using rbind(), the vectors are stacked **on top** of each other. The number of columns should be identical for row-stacking to work.

Similarly, if we have two data frames that we would like to stack **next** to each other, we can use the `cbind()` function:

```{r}
# data frame 1
df1 <- data.frame(major = c('A','B','C','D','E','F'),
                  age = c(22,25,28,19,15,23))
df1

# data frame 2
df2 <- data.frame(gender = c('Male','Male','Female','Male','Female','Female'))
df2

# bind these 2 data frames together
final_data <- cbind(df1,df2)
final_data
```

### EXERCISE

Add the information in the data frame `more_info` to `final data` from above. Hint: look at the dimensions and the information contained in the data frames to decide which binding function to use.

```{r}
more_info <- data.frame(name=c("Mark","John","Jessica","Floyd","Susan", "Shannon"),
                        home_state = c("MA", "IL", "AZ", "TX", "CA", "NJ"))


```

### Loops with for

A for-loop is one of the main control-flow constructs of the R programming language. It is used to iterate over a collection of objects, such as a vector, a list, a matrix, or a dataframe, and apply the same set of operations on each item of a given data structure. We use for-loops to keep our code clean and avoid unnecessary repetition of a code block.

The basic syntax of a for-loop in R is the following:

```         
for (variable in sequence) {
    expression
}
```

```{r}
for (i in 1:10) {
  print(i)
}
```

Something important to keep in mind, operations inside the loop are not automatically printed to the console.

```{r}
for (i in 1:10) {
  i # executes without printing to console
}
i # value still changes
```

```{r}
for (month in month.name) {
  print(month)
}
```

```{r}
for (month in month.name) {
  print(paste(month, "2023", sep=" "))
}
```

You can also combine for loops with conditional statements:

```{r}
for (i in 1:5) {
  if(i%%2==0) print(i)
}
```

```{r}
for (i in 1:5) {
  if(i%%2==0) print(i) else print("indivisble")
}
```

### EXERCISE

Write a for loop that iterates over the list below and prints "I can pet it!" if the element is not `NA` .

Hint: look up the `is.na` function with R help.

```{r}
animals <- c("cat", "dog", NA, "panda", "koala", "rabbit")

```

### EXERCISE

Now modify your loop above to print "Animal: I can pet it!" (eg: "cat: I can pet it!")

```{r}

```

### Piping with `|>`

Pipes are a powerful tool for clearly expressing a sequence of multiple operations. You will learn more about them in the Tidyverse workshop, however R 4.1.0 introduced a native pipe operator `|>`. By default, the pipe passes the object on its left-hand side to the first argument of the function on the right-hand side.

```{r}
evp <- read.csv("data/ev_police_jan.csv")
```

```{r}
evp |> names()

# equivalent to
names(evp)
```

```{r}
evp |> dim()
```

You can chain multiple operations together with pipes

```{r}
evp$location |> table() |> sort()
```

### EXERCISE

Rewrite these commands using the `|>` operator instead of nested function calls:

```         
unique(evp$vehicle_make)
sort(unique(evp$vehicle_make))
```

```{r}

```

## Changing data types

Previously, you discovered that R implicitly coerces variables into other data types when needed. For instance, if you add a `numeric` to a `logical`, the result is a `numeric`. And if you place them together in a vector, the vector will contain two `numeric` values. Alternatively, if you add a `numeric` to a `character`, the operation fails. If you put them together in a vector, both become `character` strings:

```{r}
TRUE + 5
v1 <- c(TRUE, 5)
v1

"One" + 5
v2 <- c("One", 5)
v2
```

There is a hierarchy for data types in R: `logical` \< `integer` \< `numeric` \< `character`.

When variables of different types are somehow combined (with addition, put in the same vector, and so on), R will coerce both to the higher ranking type. That is why `v1` contained `numeric` variables (`numeric` is higher ranked than `logical`) and `v2` contained `character` values (`character` is higher ranked than `numeric`).

Automatic coercion is often useful, but will sometimes cause problems. As an example, a vector of numbers may accidentally be converted to a `character` vector, which will confuse plotting functions. Luckily it is possible to convert objects to other data types. The functions most commonly used for this are `as.logical`, `as.numeric` and `as.character`. Here are some examples of how they can be used:

```{r}
as.logical(1)           # Should be TRUE
as.logical("FALSE")     # Should be FALSE
as.numeric(TRUE)        # Should be 1
as.numeric("2.718282")  # Should be numeric 2.718282
as.character(2.718282)  # Should be the string "2.718282"
as.character(TRUE)      # Should be the string "TRUE"
```

A word of warning though - conversion only works if R can find a natural conversion between the types. Here are some examples where conversion fails. Note that only some of them cause warning messages:

```{r}
as.numeric("two")                   # Should be 2
as.numeric("1+1")                   # Should be 2
as.numeric("2,718282")              # Should be numeric 2.718282
as.logical("Vaccines cause autism") # Should be FALSE
```

### EXERCISE

-   What happens if you apply `as.logical` to the `numeric` values 0 and 1? What happens if you apply it to other numbers?

-   What happens if you apply `as.character` to a vector containing `numeric` values?

-   The functions `is.logical`, `is.numeric` and `is.character` can be used to check if a variable is a `logical`, `numeric` or `character`, respectively. What type of object do they return?

```{r}

```

## Dates

Data describing dates and times can be complex, not least because it is written in so many different formats. 1 April 2020 can be written as `2020-04-01`, `20/04/01`, `200401`, `1/4 2020`, `4/1/20`, `1 Apr 20`, and a myriad of other ways. 5 past 6 in the evening can be written as `18:05` or `6.05 pm`. In addition to this ambiguity, time zones, daylight saving time, leap years and even leap seconds make working with dates and times even more complicated.

### Date formats

In most cases, when you read data with dates/times in it into R, it will be read in as character (text) data:

```{r}
evp <- read.csv("data/ev_police.csv")
str(evp)
```

If you want to use this information in a visualization, or aggregate data by month, or use the date information in other ways, you'll need to convert this information into an object that knows about dates and times. The easiest way to do this is with the lubridate package (part of tidyverse).

```{r}
# install.packages("tidyverse")
library(lubridate)
```

It has a series of functions names like:

```{r}
ymd()
ymd_hms()
dmy()
dmy_h()
mdy()
```

And so on, where y=year, m (in the first part)=month, d=day, h=hour, m (in the second part)=minute, s=second. With the function name, you are specifying which parts of a date or time appear in the text you're converting and what order the different parts appear in. You can ignore all of the delimiters and other components like dashes, slashes, or even no delimiter at all. `{lubridate}` can handle most cases:

```{r}
my_dates <- c("7/11/2023","7/11/23", "07112023", "7-11-2023", "Jul 11 2023", "Jul. 11, 2023") 
class(my_dates)
```

```{r}
my_dates <- mdy(my_dates)
class(my_dates)
```

### EXERCISE

Make two new columns in the `evp` data frame:

-   Date (capitalized) that converts the date column to a Date type - you can use a function with just the date components, such as `mdy()`, `dmy()`, or `ymd()`

-   datetime: paste (concatenate) the date and time columns together, and then convert the joined string to a datetime object - you'll need to use a function with both date and time components

    ```{r}

    ```

### Example

Now that we have the data information in a date-type format, we can ask questions such as: what day of the week had the most traffic stops?

```{r}
wday(evp$Date, label = TRUE) # day of the week of the stop (named)
table(wday(evp$Date, label=TRUE)) # tally these
```

The data we have is just for January, which means there are more instances of some days of the week than others. So we want to normalize by the number of Mondays, Tuesdays, etc.

```{r}
seq.Date(ymd("2017-01-01"), ymd("2017-01-31"), 1)  # days in January 2017

wday(seq.Date(ymd("2017-01-01"), ymd("2017-01-31"), 1), label=TRUE)  ## as days of the week

table(wday(seq.Date(ymd("2017-01-01"), ymd("2017-01-31"), 1), label=TRUE))  # tallied

table(wday(evp$Date, label=TRUE)) / table(wday(seq.Date(ymd("2017-01-01"), ymd("2017-01-31"), 1), label=TRUE)) # together
```

## Factors

Looking at the days of the week above, the output included this text at the bottom:

```{r}
Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat
```

This is because the days of the week were returned as a ordered factor -- a categorical variable.

Factors are variables with text labels, but the set of values (called levels) that are allowed for the variable is limited, and the values optionally can have a specific order to them. Categorical data is stored in R as `factor` variables. You may ask why a special data structure is needed for categorical data, when we could just use `character` variables to represent the categories.

Let's say that you've conducted a survey on students' smoking habits. The possible responses are *Never*, *Occasionally*, *Regularly* and *Heavy*. From 10 students, you get the following responses:

```{r}
smoke <- c("Never", "Never", "Heavy", "Never", "Occasionally",
           "Never", "Never", "Regularly", "Regularly", "No")
```

Note that the last answer is invalid - `No` was not one of the four answers that were allowed for the question. You could use `table` to get a summary of how many answers of each type that you got:

```{r}
table(smoke)
```

But the categories are not presented in the correct order! There is a clear order between the different categories, *Never* \< *Occasionally* \< *Regularly* \< *Heavy*, but `table` doesn't present the results in that way. Moreover, R didn't recognise that `No` was an invalid answer, and treats it just the same as the other categories. This is where `factor` variables come in. They allow you to specify which values your variable can take, and the ordering between them (if any).

### Creating Factors

When creating a `factor` variable, you typically start with a `character`, `numeric` or `logical` variable, the values of which are turned into categories. To turn the `smoke` vector that you created in the previous section into a `factor`, you can use the `factor` function:

```{r}
smoke2 <- factor(smoke)
```

You can inspect the elements, and *levels*, i.e. values that the categorical variable takes, as follows:

```{r}
levels(smoke2)
```

So far, we haven't solved neither the problem of the categories being in the wrong order nor that invalid `No` value. To fix both these problems, we can use the `levels` argument in `factor`:

```{r}
smoke2 <- factor(smoke, levels = c("Never", "Occasionally", "Regularly", "Heavy"),
                        ordered = TRUE)

# Check the results:
smoke2
levels(smoke2)
table(smoke2)
```

You can control the order in which the levels are presented by choosing which order we write them in in the `levels` argument. The `ordered = TRUE` argument specifies that the order of the variables is *meaningful*.

It can be excluded in cases where you wish to specify the order in which the categories should be presented purely for presentation purposes (e.g. when specifying whether to use the order `Male/Female/Other` or `Female/Male/Other`). Also note that the `No` answer now became an `NA`, which in the case of `factor` variables represents both missing observations and invalid observations. To find the values of `smoke` that became `NA` in `smoke2` you can use `which` and `is.na`:

```{r}
smoke[which(is.na(smoke2))]
```

By checking the original values of the `NA` elements, you can see if they should be excluded from the analysis or recoded into a proper category (`No` could for instance be recoded into `Never`).

### Changing factor levels

When we created `smoke2`, one of the elements became an `NA`. `NA` was however not included as a level of the `factor`. Sometimes it is desirable to include `NA` as a level, for instance when you want to analyse rows with missing data. This is easily done using the `addNA` function:

```{r}
smoke2 <- addNA(smoke2)
```

If you wish to change the name of one or more of the `factor` levels, you can do it directly via the `levels` function. For instance, we can change the name of the `NA` category, which is the 5th level of `smoke2`, as follows:

```{r}
levels(smoke2)[5] <- "Invalid answer"
```

Finally, if you've added more levels than what are actually used, these can be dropped using the `droplevels` function:

```{r}
smoke2 <- factor(smoke, levels = c("Never","Occasionally","Regularly","Heavy","Constantly"),
                        ordered = TRUE)
levels(smoke2)
smoke2 <- droplevels(smoke2)
levels(smoke2)
```

### Changing the order of levels

Now suppose that we'd like the levels of the `smoke2` variable to be presented in the reverse order: *Heavy*, *Regularly*, *Occasionally*, and *Never*. This can be done by a new call to `factor`, where the new level order is specified in the `levels` argument:

```{r}
smoke2 <- factor(smoke2, levels = c("Heavy", "Regularly", "Occasionally", "Never"))

# Check the results:
levels(smoke2)
```

### Combining levels

Finally, `levels` can be used to merge categories by replacing their separate names with a single name. For instance, we can combine the smoking categories *Occasionally*, *Regularly*, and *Heavy* to a single category named *Yes*. Assuming that these are first, second and third in the list of names (as will be the case if you've run the last code chunk above), here's how to do it:

```{r}
levels(smoke2)[1:3] <- "Yes"
levels(smoke2)
```

### EXERCISE

Convert the vector below to a factor. Set the levels in an intentional order.

```{r}
directions <- c("east", "west", "east", "south", "north", "north", "west", "north", "east")
```

### EXERCISE

Using the `evp` dataset, and convert the columns `subject_race` and `subject_sex` into factors.

```{r}

```

## Strings

Text in R is represented by `character` strings. These are created using double or single quotes. I recommend double quotes for three reasons. First, it is the default in R, and is the recommended style (see e.g. `?Quotes`). Second, it improves readability - code with double quotes is easier to read because double quotes are easier to spot than single quotes. Third, it will allow you to easily use apostrophes in your strings, which single quotes don't (because apostrophes will be interpreted as the end of the string). Single quotes can however be used if you need to include double quotes inside your string:

```{r}
# This works:
text1 <- "An example of a string. Isn't this great?"
text2 <- 'Another example of a so-called "string".'

# This doesn't work:
text1_fail <- 'An example of a string. Isn't this great?
text2_fail <- "Another example of a so-called "string"."
```

If you check what these two strings look like, you'll notice something funny about `text2`:

```{r}
text1
text2
```

R has put backslash characters, `\`, before the double quotes. The backslash is called an *escape character*, which invokes a different interpretation of the character that follows it. In fact, you can use this to put double quotes inside a string that you define using double quotes:

```{r}
text2_success <- "Another example of a so-called \"string\"."
```

There are a number of other special characters that can be included using a backslash: `\n` for a line break (a new line) and `\t` for a tab (a long whitespace) being the most important:

```{r}
text3 <- "Text...\n\tWith indented text on a new line!"
```

To print your string in the Console in a way that shows special characters instead of their escape character-versions, use the function `cat`:

```{r}
cat(text3)
```

### `{stringr}` package

The stringr package provides a cohesive set of functions designed to make working with strings as easy as possible. It is part of the `{tidyverse}` set of packages.

```{r}
# intsall.packages("tidyverse")
library(stringr)
```

Here is a handy [cheat-sheet](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf) for string manipulation with {`stringr}`. All functions start with `str_` and take a vector of strings as the first argument.

#### Cleaning text labels

There are functions for converting and cleaning up text data:

```{r}
str_to_lower("John Oliver")
```

```{r}
str_to_title("r bootcamp workshop day 2")
```

```{r}
str_trim("     John ") # remove whitespace beginning and end
```

```{r}
str_squish("r     bootcamp    workshop  day   2   ") # trim plus collapse interior spaces
```

There are functions for padding strings

```{r}
str_pad("8831", width = 5, side="left", pad="0")
```

#### Detecting or Replacing strings

Then there are lots of functions to detect or replace substrings in a string. These functions will take either a fixed string for comparison or a regular expression. Regular expressions, or regex, are a way of writing patterns that match text. We can't cover them all within this workshop, but they're well worth learning and will save you lots of time if you work with text at all.

They default to interpreting the "pattern" input as a regex. This doesn't make much difference if you're only searching for letters and spaces. If you need to search for punctuation, you will likely want to tell it it's not a regex.

These functions all take the string to work on first, then the pattern to match/detect, then other options.

```{r}
str_detect("John Oliver", "liver")
str_detect("John Oliver", "heart")
```

```{r}
# don't use a regex, and don't care about case
str_detect("John Oliver", fixed("LIVER", ignore_case=TRUE))
```

`fixed()` is useful to tell it to make a literal match. To get a case-insensitive match you have to use either `fixed()` or `regex()` explicitly. For example, a "." has special meaning in regular expressions (it matches any character), so if you want to match a literal period, `fixed()` is useful:

```{r}
str_detect("John Oliver", ".")
str_detect("John Oliver", fixed("."))
```

You can also match to the beginning or the end of strings:

```{r}
str_starts("Oliver", "Ol")
str_ends("Oliver", "ver")
```

You can also just get the elements of the vector that do match:

```{r}
my_string_vector <- c("Political Science", "Biological Science", "Pol. Science", "technology")
str_subset( my_string_vector, regex("pol.+sci.+", ignore_case=TRUE))
```

Replacing -- there is a version of each for replacing the first occurrence vs. all. First, just deletion:

```{r}
str_remove("John Oliver is a person who exists", "i")
str_remove_all("John Oliver is a person who exists", "i")
```

Replacing with something new:

```{r}
str_replace("John Oliver is a person who exists", "i", "a")
str_replace_all("John Oliver is a person who exists", "i", "a")
```

You can split a string, which can get complicated, because you get lists back, unless you know how many components to expect:

```{r}
str_split("John Oliver is a person who exists", pattern=" ")
```

```{r}
# here fixed means fixed number of components, not a fixed pattern as above
str_split_fixed("John Oliver is a person who exists", pattern=" ", n = 3)
```

### EXERCISE

Load the `evp` dataset, and find all the rows where the reason for stop (`reason_for_stop`) is a moving violation of any type

```{r}

```

### EXERCISE

Convert the department name from all capitals to title case

```{r}

```

### EXERCISE

Clean the location column, which should be a five letter zip code, such that values like "9121" are corrected to "09121"

```{r}

```

## 
